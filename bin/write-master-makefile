#!/usr/bin/perl -W
# -*- cperl -*-

my @banks = ();
{
  for (my $bank = 0; $bank < 8; ++$bank) {
    push @banks => sprintf "%02x" => $bank;
  }
}

print '# Makefile (generated)
# -*- makefile -*-


YEAR=$(shell date +%Y)
YEAR2=$(shell date +%y)
MONTH=$(shell date +%m)
DATE=$(shell date +%d)
JULIAN=$(shell date +%j)
BUILD=$(shell date +%y.%j)
PUBLISHER=false # override from command line only
ASFLAGS=--nostart --long-branch --case-sensitive \
	--ascii -I Source/Common -I Source/Routines -I Source/Generated/Common \
	-D YEARNOW=${YEAR} -D MONTHNOW=${MONTH} \
	-D DATENOW=${DATE} -D JULIANDATENOW=${JULIAN} \
	-D BUILD=${BUILD} -D PUBLISHER=${PUBLISHER} \
	-Wall -Wno-shadow -Wno-leading-zeros
AS2600=64tass ${ASFLAGS} --m6502

Source/Generated/Common/SpeakJetIDs.s:	$(shell ls -1 Source/Banks/Bank07/*Speech.txt)
	bin/make-speakjet-enums

Source/Generated/Bank07/SpeakJetIndex.s:	$(shell ls -1 Source/Banks/Bank07/*Speech.txt)
	bin/make-speakjet-enums

';

my %rules = ();

for my $tv ('NTSC', 'PAL', 'SECAM') {
  my %seen = ();

  print "Dist/Grizzards.$tv.a26:\t";

  for my $bank (@banks) {
    print "\\\n\tObject/Bank$bank.$tv.o ";
  }

  print "
\tmkdir -p Dist
\tcat \$^ > \$\@\n\n";

  print "Dist/Grizzards.Demo.$tv.a26:\t";

  for my $bank (@banks) {
    print "\\\n\tObject/Bank$bank.Demo.$tv.o ";
  }

  print "
\tmkdir -p Dist
\tcat \$^ > \$\@\n\n";

  for my $bank (@banks) {
    my %seen = ();

    my @files = ();
    {
      my @todo = ( "Source/Banks/Bank$bank/Bank$bank.s" );

      {
        opendir my $src, "Source/Banks/Bank$bank/";
        while (my $file = readdir $src) {
          next unless $file =~ /\.(s|txt|png|midi)$/;
          push @todo => "Source/Banks/Bank$bank/$file";
        }
        closedir $src;
      }

      while (@todo) {
        my $path = shift @todo;
        next unless -f $path;
        next if $seen{ $path };
        ++$seen{ $path };

        my $file = ( split '\\/' => $path )[ -1 ];
        my ($base, $ext) = split '\\.' => $file;
        if ('txt' eq $ext) {
          next if $rules{ $path };
          ++ $rules{ $path };
          print "Source/Generated/Bank$bank/$base.s:\tSource/Banks/Bank$bank/$base.txt \\
\t\tSource/Common/SpeakJet.dic bin/convert-to-speakjet
\tmkdir -p Source/Generated/Bank$bank
\tbin/convert-to-speakjet \$< Source/Common/SpeakJet.dic \$\@\n\n";
          push @files => "Source/Generated/Bank$bank/$base.s";
        } elsif ('midi' eq $ext) {
          next if $rules{ $path };
          ++ $rules{ $path };
          print "Source/Generated/Bank$bank/$base.s:\tSource/Banks/Bank$bank/$base.midi\\
\t\tbin/skyline-tool
\tmkdir -p Source/Generated/Bank$bank
\tbin/skyline-tool compile-music \$\@ \$<\n\n";
          push @files => "Source/Generated/Bank$bank/$base.s";
        } elsif ('png' eq $ext) {
          next if $rules{ $path };
          ++ $rules{ $path };
          print "Source/Generated/Bank$bank/$base.s:\tSource/Banks/Bank$bank/$base.png \\
\t\tbin/skyline-tool
\tmkdir -p Source/Generated/Bank$bank
\tbin/skyline-tool compile-art \$\@ \$<\n\n";
          push @files => "Source/Generated/Bank$bank/$base.s";
        } elsif ('s' eq $ext) {
          push @files => $path;
          open my $text, '<', $path;
          while (my $line = <$text>) {
            if ($line =~ /\.include "(.+)"/) {
              my $dep = $1;
              push @todo => "Source/Banks/Bank$bank/$dep";
              push @todo => "Source/Common/$dep";
              push @todo => "Source/Routines/$dep";
              push @todo => "Source/Generated/Common/$dep";
              push @todo => "Source/Generated/Banks/Bank$bank/$dep";
            }
          }
          close $text;
        } else {
          die "Unhandled extension $ext";
        }
      }
    }

    print "Object/Bank$bank.$tv.o:\t";
    for my $file (@files) {
      print "\\\n\t$file";
    }
    print "
\tmkdir -p Object
\t\${AS2600} -DTV=$tv -I Source/Generated/Bank$bank -l \$\@.labels.txt -L \$\@.list.txt \$< -o \$\@\n
\tbin/label2sym \$\@.labels.txt\n\n";

      print "Object/Bank$bank.Demo.$tv.o:\t";
    for my $file (@files) {
      print "\\\n\t$file";
    }
    print "
\tmkdir -p Object
\t\${AS2600} -DTV=$tv -DDEMO=true -I Source/Generated/Bank$bank -l \$\@.labels.txt -L \$\@.list.txt \$< -o \$\@\n
\tbin/label2sym \$\@.labels.txt\n\n";
}
}

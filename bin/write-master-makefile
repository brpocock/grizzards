#!/usr/bin/perl -W
# -*- cperl -*-

my @banks = ();
{
  for (my $bank = 0; $bank < 32; ++$bank) {
    push @banks => sprintf "%02x" => $bank;
  }
}

print '# Makefile (generated)
# -*- makefile -*-


YEAR=$(shell date +%Y)
YEAR2=$(shell date +%y)
MONTH=$(shell date +%m)
DATE=$(shell date +%d)
JULIAN=$(shell date +%j)
BUILD=$(shell date +%y.%j)
ASFLAGS=--nostart --long-branch --case-sensitive \
	--ascii -I. -I Source/Common -I Source/Routines -I Source/Generated/Common \
	-D YEARNOW=${YEAR} -D MONTHNOW=${MONTH} \
	-D DATENOW=${DATE} -D JULIANDATENOW=${JULIAN} \
	-D BUILD=${BUILD} \
	-Wall -Wno-shadow -Wno-leading-zeros
AS2600=64tass ${ASFLAGS} --m6502 -m --tab-size=1 --verbose-list

';

for my $bank (qw( 05 07 08 09 0a 0b 0c 0d 0e )) {
  print "Source/Generated/Bank$bank/SpeakJetIDs.s:	\$(shell ls -1 Source/Banks/Bank$bank/*Speech.txt)
	bin/make-speakjet-enums $bank

Source/Generated/Bank$bank/SpeakJetIndex.s:	\$(shell ls -1 Source/Banks/Bank$bank/*Speech.txt)
	bin/make-speakjet-enums $bank
";
}

my %rules = ();

for my $tv ('NTSC', 'PAL', 'SECAM') {

  print "\n\nDist/Grizzards.Demo.$tv.a26:\t";

  for my $bank (@banks) {
    print "\\\n\tObject/Bank$bank.Demo.$tv.o " if hex("0x$bank") < 8;
  }

  print "
\tmkdir -p Dist
\tcat \$^ > \$\@\n\n";

  print "\n\nDist/Grizzards.NoSave.$tv.a26:\t";

  for my $bank (@banks) {
    print "\\\n\tObject/Bank$bank.NoSave.$tv.o " if hex("0x$bank") < 8;
  }

  print "
\tmkdir -p Dist
\tcat \$^ > \$\@\n\n";

  for my $starter (0, 1, 2) {

    my $starter_name = (qw[Dirtex Aquax Airex])[$starter];

    print "Dist/Grizzards.$starter_name.$tv.a26:\t";
    for my $bank (@banks) {
      print "\\\n\tObject/Bank$bank.$starter_name.$tv.o ";
    }
    print "
\tmkdir -p Dist
\tcat \$^ > \$\@\n\n";

    my @places = @banks;
    unshift @places => 'Common';
    for my $bank (@places) {
      my $bankdir = "Source/Banks/Bank$bank";
      my $genrdir = "Source/Generated/Bank$bank";
      my $bankfile = "Bank$bank.s";

      if ($bank eq 'Common') {
        $bankdir = 'Source/Common';
        $genrdir = 'Source/Generated/Common';
        $bankfile = undef;
      }

      my %seen = ();

      my @files = ();
      {
        my @todo = ();
        if ($bankfile) {
          push @todo => "$bankdir/$bankfile";
        }

        {
          opendir my $src, "$bankdir/";
          while (my $file = readdir $src) {
            next unless $file =~ /\.(s|txt|png|midi)$/;
            push @todo => "$bankdir/$file";
          }
          closedir $src;
        }

        while (@todo) {
          my $path = shift @todo;
          if ($path =~ m(^Source/Generated)) {
            my $orig_path = $path;
            $orig_path =~ s(Generated/Common) (Common);
            $orig_path =~ s(Generated/Bank) (Banks/Bank);
            $orig_path =~ s(\.s$) ();
            if (-f "$orig_path.png" or -f "$orig_path.midi" or -f "$orig_path.txt") {
              unless ($seen{ $path }) {
                ++$seen{ $path };
                push @files => $path;
              }
            }
          }
          next unless -f $path;
          next if $seen{ $path };
          ++$seen{ $path };

          my $file = ( split '\\/' => $path )[ -1 ];
          my ($base, $ext) = split '\\.' => $file;
          if ('txt' eq $ext) {
            next if $rules{ $path };
            ++ $rules{ $path };
            print "$genrdir/$base.s:\t$bankdir/$base.txt \\
\t\tSource/Common/SpeakJet.dic bin/convert-to-speakjet
\tmkdir -p $genrdir
\tbin/convert-to-speakjet \$< Source/Common/SpeakJet.dic \$\@\n\n";
            push @files => "$genrdir/$base.s";
          } elsif ('midi' eq $ext) {
            next if $rules{ $path };
            ++ $rules{ $path };
            print "$genrdir/$base.s:\t$bankdir/$base.midi\\
\t\tbin/skyline-tool
\tmkdir -p $genrdir
\tbin/skyline-tool compile-music \$\@ \$<\n\n";
            push @files => "$genrdir/$base.s";
          } elsif ('png' eq $ext) {
            next if $rules{ $path };
            ++ $rules{ $path };
            print "$genrdir/$base.s:\t$bankdir/$base.png \\
\t\tbin/skyline-tool
\tmkdir -p $genrdir
\tbin/skyline-tool compile-art \$\@ \$<\n\n";
            push @files => "$genrdir/$base.s";
          } elsif ('s' eq $ext) {
            push @files => $path;
            open my $text, '<', $path;
            while (my $line = <$text>) {
              if ($line =~ /\.include "(.+).s"/) {
                my $dep = $1;
                if ($bank ne 'Common') {
                  push @todo => "$bankdir/$dep.s";
                  push @todo => "$genrdir/$dep.s";
                }
                push @todo => "Source/Common/$dep.s";
                push @todo => "Source/Routines/$dep.s";
                push @todo => "Source/Generated/Common/$dep.s";
              }
            }
            close $text;
          } else {
            die "Unhandled extension $ext";
          }
        }
      }

      if ($bank eq 'Common') {
        next;
      }

      print "Object/Bank$bank.$starter_name.$tv.o:\t";
      for my $file (@files) {
        print "\\\n\t$file";
      }
      print "
\tmkdir -p Object
\t\${AS2600} -DSTARTER=$starter -DPUBLISHER=true -DTV=$tv -I Source/Generated/Bank$bank -l \$\@.labels.txt -L \$\@.list.txt \$< -o \$\@\n
\tbin/label2sym \$\@.labels.txt\n\n";

      if (1 == $starter and hex("0x$bank") < 8) {
        print "\n\nObject/Bank$bank.Demo.$tv.o:\t";
        for my $file (@files) {
          print "\\\n\t$file";
        }
        print "
\tmkdir -p Object
\t\${AS2600} -DTV=$tv -DDEMO=true -I Source/Generated/Bank$bank -l \$\@.labels.txt -L \$\@.list.txt \$< -o \$\@\n
\tbin/label2sym \$\@.labels.txt\n\n";

        print "\n\nObject/Bank$bank.NoSave.$tv.o:\t";
        for my $file (@files) {
          print "\\\n\t$file";
        }
        print "
\tmkdir -p Object
\t\${AS2600} -DTV=$tv -DDEMO=true -DNOSAVE=true -I Source/Generated/Bank$bank -l \$\@.labels.txt -L \$\@.list.txt \$< -o \$\@\n
\tbin/label2sym \$\@.labels.txt\n\n";
      }
    }                           # end of bank
  }                             # end of starter
}                               # end of TV standard
